import{j as n}from"./jsx-runtime-DEdD30eg.js";import{r as p}from"./index-RYns6xqu.js";function s({children:o}){return n.jsx("div",{className:"faceplate-grid-mount",children:o})}s.__docgenInfo={description:`This is a special component that can be used to provided a "mounted" space in the grid.
 This essentially allows anything that is installed inside to assume 100% of height and
 width and overlay the occupied grid cell perfectly.

 The component is motly useful when applied on components that are spanning across
 a couple of rows or column that are derived from the size of components inside them.
 This way it can dynamically allocate space and align correctly with other components.`,methods:[],displayName:"Mount",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"The children of the component."}}};function t({xSpan:o=1,ySpan:l=1,mount:a=!1,children:r}){const e={gridColumn:`span ${o}`,gridRow:`span ${l}`};return a?n.jsx("div",{className:"faceplate-grid-cell",style:e,children:n.jsx(s,{children:r})}):n.jsx("div",{className:"faceplate-grid-cell",style:e,children:r})}t.__docgenInfo={description:`A grid cell. The main responsibility of this component is to reserve
 proper amount of space for the child component.`,methods:[],displayName:"Cell",props:{xSpan:{required:!1,tsType:{name:"number"},description:"How many cells in the grid the cell should span in X direction?",defaultValue:{value:"1",computed:!1}},ySpan:{required:!1,tsType:{name:"number"},description:"How many cells in the grid the cell should span in Y direction?",defaultValue:{value:"1",computed:!1}},mount:{required:!1,tsType:{name:"boolean"},description:`Should the child component be installed in a mounted cell? Meaning that
 the 100% of height or width will span the whole cell perfectly.

 @see Mount component documentation for better information.`,defaultValue:{value:"false",computed:!1}},children:{required:!1,tsType:{name:"ReactNode"},description:"The children. This should be one root element for the cell."}}};function d({columns:o,rows:l,children:a}){const r={gridTemplateColumns:`repeat(${o}, 1fr)`,gridTemplateRows:`repeat(${l}, 1fr)`};return n.jsx("div",{className:"faceplate-grid",style:r,children:p.Children.map(a,e=>typeof e=="number"||typeof e=="string"?n.jsx(t,{children:e}):e.type===p.Fragment?n.jsx(n.Fragment,{children:e.props.children.map((i,m)=>i.type===t?i:n.jsx(t,{children:i},m))}):e.type!==t?n.jsx(t,{children:e}):e)})}d.Cell=t;d.Mount=s;d.__docgenInfo={description:"This is a component that allows placing elements inside a grid layout.",methods:[{name:"Cell",docblock:null,modifiers:["static"],params:[{name:"{ xSpan = 1, ySpan = 1, mount = false, children }: CellProps",optional:!1,type:{name:"CellProps",alias:"CellProps"}}],returns:null},{name:"Mount",docblock:null,modifiers:["static"],params:[{name:"{ children }: MountProps",optional:!1,type:{name:"MountProps",alias:"MountProps"}}],returns:null}],displayName:"Grid",props:{columns:{required:!0,tsType:{name:"union",raw:'number | "auto"',elements:[{name:"number"},{name:"literal",value:'"auto"'}]},description:"The number of columns the grid will form."},rows:{required:!0,tsType:{name:"union",raw:'number | "auto"',elements:[{name:"number"},{name:"literal",value:'"auto"'}]},description:"The number of rows the grid will form."},children:{required:!1,tsType:{name:"ReactNode"},description:"The children of the grid."}}};export{t as C,d as G};
